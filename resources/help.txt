--[]--

Usage:
    $ tns <command> [command parameters] [--command <options>]

General commands:
    help <command>                  Shows additional information about the commands in this list.

    create                          Creates a new project for native development with NativeScript.
    platform add                    Configures the current project to target the selected platform.
    platform list                   Lists all target platforms for the current project.
    platform remove                 Removes the platform specific project.
    prepare                         Copies cross-platform content to the subdirectory for the selected target platform. 
                                    This lets you build the project with the SDK for the selected platform.
    build                           Builds the project for the selected target platform and produces an application package.
    run                             Runs your project on a connected device. This is shorthand for prepare, build, and deploy.

General options:
    --help              Prints help about the selected command.
    --path <Directory>  Specifies the directory that contains the project. If not set, the project is searched for
                        in the current directory and all directories above it.
    --version           Prints the client version.
--[/]--

--[help]--

Usage:
    $ tns help [<Command>]
    
Lists the available commands or shows information about the selected command.
<Command> is any of the available commands as listed by $ tns help.

--[/]--

--[create]--

Usage:
    $ tns create <App name> [--path <Directory>] [--appid <App ID>] [--copy-from <Directory>]

Creates a new NativeScript project.
<App name> is the name of project. The specified name must comply with the limitations of the target platform. 
           For example, the name of a project that targets Android must not begin with a number because classes in Java
           cannot begin with numbers.

Options:
    --path - Specifies the directory where you want to create the project, if different from the current directory.
            The directory must be empty.
    --appid - Sets the application identifier for your project. The application identifier must consist of at least three
              alphanumeric strings, separated by a dot (.). Each string must start with a letter.
              The application identifier corresponds to the Bundle ID for iOS apps and to the package identifier for Android apps.
              If not specified, the application identifier is set to com.telerik.<App name>.
    --copy-from - Specifies a directory which contains custom assets that you want to use in your NativeScript project. If not set,
                  the default hello-world template is used.

--[/]--

--[platform]--

Usage:
    $ tns platform <Command>

You must run the platform command with a related command.

<Command> is a related command that extends the platform command. You can run the following related commands:
    list - Lists all target platforms for the current project.
    add - Configures the current project to target the selected platform.
    remove - Removes the deployment capabilities of a project for the specified platform

--[/]--

--[platform|list]--

Usage:
    $ tns platform list

Lists all target platforms for the current project.

--[/]--

--[platform|add]--

Usage:
    $ tns platform add <Platform>

Platform-specific usage:
    $ tns platform add android
    $ tns platform add ios

Configures the current project to target the selected platform. In this version of Telerik NativeScript, 
you can target iOS and Android, based on your system. You need to have your system configured for development with the target 
platform.
On Windows systems, you can target Android. 
On OS X systems, you can target Android and iOS.

When you add a target platform, the Telerik NativeScript CLI adds a corresponding platform-specific subdirectory under the platforms
directory. This platform-specific directory contains the necessary files to let you build your project for the target platform.
--[/]--

--[platform|remove]--

Usage:
    $ tns platform remove <platform>

Platform-specific usage:
    $ tns platform remove android
    $ tns platform remove ios

Removes the deployment capabilities of a project for the specified platform.

--[/]--

--[prepare]--

Usage:
    $ tns prepare [<Platform>]

Platform-specific usage:
    $ tns prepare android
    $ tns prepare ios

Copies cross-platform content to the subdirectory for the selected target platform. This lets you build the project with 
the SDK for the selected platform.

--[/]--

--[build]--

Usage:
    $ tns build [<platform>]

Platform-specific usage:
    $ tns build android
    $ tns build ios

Builds the project for the selected target platform. This generates platform-specific code within the platforms subdirectory
in the project.

--[/]--

--[run]--

Usage:
    $ tns run [<platform>]

Platform-specific usage:
    $ tns run android
    $ tns run ios

This is shorthand for prepare and build.

--[/]--

