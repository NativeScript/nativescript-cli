--[]--

Usage:
    $ tns <command> [command parameters] [--command <options>]

Alias:
    $ nativescript <command> [command parameters] [--command <options>]

General commands:
    help <command>                  Shows additional information about the commands in this list.

    create                          Creates a new project for native development with NativeScript.
    platform add                    Configures the current project to target the selected platform.
    platform list                   Lists all platforms that the project currently targets.
    platform remove                 Removes the selected platform from the platforms that the project currently targets.
                                    This operation deletes all platform-specific files and subdirectories from your project.
    platform update                 Updates the NativeScript runtime for the specified platform.
    library add                     Adds a locally stored native library to the current project.
    prepare                         Copies relevant content from the app directory to the subdirectory for the selected target platform. 
                                    This lets you build the project with the SDK for the selected platform and deploy it on device.
    build                           Builds the project for the selected target platform and produces an application package or an
                                    emulator package.
    deploy                          Deploys the project to a connected physical or virtual device.
    emulate                         Deploys the project in the native emulator for the selected target platform.
    run                             Runs your project on a connected device or in the native emulator, if configured. 
                                    This is shorthand for prepare, build, and deploy.
    debug                           Debugs your project on a connected device or in the native emulator, if configured. 
    device                          Lists all recognized connected physical or virtual device.
    device log                      Opens the log stream for the selected device.
    device run                      Runs the selected application on a connected device.
    device list-applications        Lists the installed applications on all connected devices.  
    feature-usage-tracking          Configures anonymous feature usage tracking.

General options:
    --help, -h, /?      Prints help about the selected command.
    --path <Directory>  Specifies the directory that contains the project. If not set, the project is searched for
                        in the current directory and all directories above it.
    --version           Prints the client version.
    --log trace         Prints a detailed diagnostic log for the execution of the current command.
--[/]--

--[help]--

Usage:
    $ tns help [<Command>]
    $ nativescript [<Command>]
    
Lists the available commands or shows information about the selected command.
<Command> is any of the available commands as listed by $ tns help.

--[/]--

--[create]--

Usage:
    $ tns create <App name> [--path <Directory>] [--appid <App ID>] [--copy-from <Directory>]
    $ nativescript create <App name> [--path <Directory>] [--appid <App ID>] [--copy-from <Directory>]

Creates a new project for native development with NativeScript from the default template or from an existing NativeScript project.

<App name> is the name of project. The specified name must meet the requirements of all platforms that you want to target. 
           For projects that target Android, you can use uppercase or lowercase letters, numbers, and underscores. The name must start with a letter.
           For projects that target iOS, you can use uppercase or lowercase letters, numbers, and hyphens. 

Options:
    --path - Specifies the directory where you want to create the project, if different from the current directory.
            The directory must be empty.
    --appid - Sets the application identifier for your project. The application identifier must be a domain name in reverse and must
              meet the requirements of all platforms that you want to target.
              For projects that target Android, you can use uppercase or lowercase letters, numbers, and underscores in the strings of the reversed domain name, separated by a dot. Strings must be separated by a dot and must start with a letter. For example: com.nativescript.My_Andro1d_App
              For projects that target iOS, you can use uppercase or lowercase letters, numbers, and hyphens in the strings of the reversed domain name. Strings must be separated by a dot. For example: com.nativescript.My-i0s-App
              If not specified, the application identifier is set to org.nativescript.<App name>.
    --copy-from - Specifies a directory which contains an existing NativeScript project. 
                  If not set, the NativeScript CLI creates the project from the default hello-world template.

--[/]--

--[platform]--

Usage:
    $ tns platform <Command>
    $ nativescript platform <Command>

You must run the platform command with a related command.

<Command> is a related command that extends the platform command. You can run the following related commands:
    list - Lists all platforms that the project currently targets. You can build and deploy your project only for 
           these target platforms.
    add - Configures the current project to target the selected platform. After adding the target platform, you can 
          build and deploy your app on devices which run on the platform.
    remove - Removes the selected platform from the platforms that the project currently targets. After removing 
             the target platform, you can no longer build and deploy your app on devices which run on the platform.
             This operation deletes all platform-specific files and subdirectories from your project.
    update - Updates the NativeScript runtime for the specified platform.

--[/]--

--[platform|list]--

Usage:
    $ tns platform list
    $ nativescript platform list

Lists all platforms that the project currently targets. You can build and deploy your project only for these target platforms.

--[/]--

--[platform|add]--

Usage:
    $ tns platform add <Platform> [--frameworkPath <File Path>] [--symlink]

Platform-specific usage:
    $ tns platform add android [--frameworkPath <File Path>] [--symlink]
    $ tns platform add ios [--frameworkPath <File Path>] [--symlink] 

Configures the current project to target the selected platform. 

<File Path> is the complete path to a valid npm package or a directory that contains a NativeScript runtime for the selected platform. 

When you add a target platform, the NativeScript CLI adds a corresponding platform-specific subdirectory under the platforms directory. This platform-specific directory contains the necessary files to let you build your project for the target platform.

In this version of the NativeScript CLI, you can target iOS and Android, based on your system. You need to have your system configured for development with the target platform.
On Windows and Linux systems, you can target Android. 
On OS X systems, you can target Android and iOS.

Options:
    --frameworkPath - Sets the path to a NativeScript runtime for the specified platform that you want to use instead of the default runtime.
        If --symlink is specified, <File Path> must point to directory in which the runtime is already extracted. 
        If --symlink is not specified, <File Path> must point to a valid npm package. 
    --symlink - Creates a symlink to a NativeScript runtime for the specified platform that you want to use instead of the default runtime.
        If --frameworkPath is specified, creates a symlink to the specified directory.
        If --frameworkPath is not specified, creates a symlink to platform runtime installed with your current version of NativeScript.

--[/]--

--[platform|remove]--

Usage:
    $ tns platform remove <Platform>

Platform-specific usage:
    $ tns platform remove android
    $ tns platform remove ios

Removes the selected platform from the platforms that the project currently targets. After removing the target platform, you can no longer build and deploy your app on devices which run on the platform.

This operation deletes the subdirectory for the selected platform from the platforms directory.

--[/]--

--[platform|update]--

Usage:
    $ tns platform update <Platform>

Platform-specific usage:
    $ tns platform update android
    $ tns platform update ios

Updates the NativeScript runtime for the specified platform.
--[/]--

--[library]--
Usage:
    $ tns library <Command>

You must run the library command with a related command.

<Command> is a related command that extends the library command. You can run the following related commands:
    add - Adds a native library to the current project.
--[/]--

--[library|add]--
Usage:
    $ tns library add <Platform> <Path>

Platform-specific usage:
    $ tns library add android <Library Path>
    $ tns library add ios <Library Path>

Adds a native library to the current project. Copies the library files to the lib/<platform> folder in your project and configures the platform-specific projects in platforms/<platform> to work with the library. Build operations might perform additional configuration changes on the platform-specific project in platforms/<platform>.

IMPORTANT: When adding frameworks, keep in mind the following behaviors.
    * When you add an iOS framework, the NativeScript CLI automatically changes your build target to iOS 8.0.
    * Any functionality exposed by the library will becomes available in the built application package.
    * The first build operation after you run this command is significantly slower.

<Library Path> is the file path to a locally stored framework.
    When you want to add an iOS framework, <Library Path> must be the complete file path to the *.framework file that you want to use.
    When you want to add an Android framework, <Library Path> might be any of the following:
        * The file path to a directory containing one or more *.jar files.
        * The file path to a directory containing the project.properties files for an Android library project created with Eclipse.
        * The complete file path to a *.jar or project.properties file.

Prerequisites:
Before adding a framework, verify that your project meets the following requirements:
    * You have added the platform for which you want to add a native library by running $ tns platform add <Platform>
Before adding an iOS framework, verify that your system and the framework meets the following requirements.
    * You have installed Mono using Homebrew.
    * You have Xcode 6 and the iOS 8.0 SDK installed.
    * The framework is a Cocoa Touch Framework with all build architectures enabled.
    * If the framework relies on other third-party frameworks, make sure to add these frameworks manually as well.
Before adding an Android framework, verify that the framework meets the following requirements.
    * If you want to add an Android library project, the project must be created and developed with Eclipse.
    * If an Android library project depends on other libraries, make sure that these libraries are accessible locally.
    * If a *.jar file depends on other libraries, make sure to add the dependent libraries by storing them in the same directory and passing this directory to <Library Path>. Otherwise, make sure to add each dependent library manually as well.

--[/]--

--[prepare]--

Usage:
    $ tns prepare <Platform>

Platform-specific usage:
    $ tns prepare android
    $ tns prepare ios

Copies common and relevant platform-specific content from the app directory to the subdirectory for the selected target platform
in the platforms directory. This lets you build the project with the SDK for the selected platform.

--[/]--

--[library|add]--

Usage
    $ tns library add <Platform> <Library path>
    $ nativescript library add <Platform> <Library path>

Platform-specific usage:
    $ tns library add android <Library path>
    $ tns library add ios <Library path>
    $ nativescript library add android <Library path>
    $ nativescript library add ios <Library path>

Copies the native library at <Library path> to the current project and adds it to the native build for the selected platform.
The NativeScript runtime will expose the APIs available in the native library in your application.

--[/]--

--[build]--
Usage:
    $ tns build <Command>

You must run the create command with a related command.

Builds the project for the selected target platform and produces an application package that you can manually deploy on device or in the native emulator.

<Command> is a related command that sets a target platform for the build command. You can run the following related commands:
    android - Builds the project for Android and produces an APK that you can manually deploy on device or in the native emulator.
    ios - Builds the project for iOS and produces an APP or IPA that you can manually deploy in the iOS Simulator or on device, respectively.
--[/]--

--[build|android]--
Usage:
    $ tns build android [--keyStorePath <File Path> --keyStorePassword <Password> --keyStoreAlias <Name> --keyStoreAliasPassword <Password>] [--release] 

Builds the project for Android and produces an APK that you can manually deploy on device or in the native emulator.

Options:
    --release - If set, produces a release build. Otherwise, produces a debug build.
        When the --keyStore* options are specified, produces a signed release build.
    --keyStorePath - Specifies the file path to the keystore file (P12) which you want to use to code sign your APK.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStorePassword - Provides the password for the keystore file specified with --keyStorePath.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStoreAlias - Provides the alias for the keystore file specified with --keyStorePath.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStoreAliasPassword - Provides the password for the alias specified with --keStoreAliasPassword.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
--[/]--

--[build|ios]--

Usage:
    $ tns build ios [--forDevice] [--release]

Builds the project for iOS and produces an APP or IPA that you can manually deploy in the iOS Simulator or on device, respectively.

Before building for iOS device, verify that you have configured a valid pair of certificate and provisioning profile on your OS X system.

Options:
    --release - If set, produces a release build. Otherwise, produces a debug build.
    --forDevice - If set, produces an application package that you can deploy on device.
               Otherwise, produces a build that you can run only in the native iOS Simulator.

--[/]--

--[deploy]--

Usage:
    $ tns deploy <Platform> [--device <Device ID>] [--release]

Platform-specific usages:
    $ tns deploy android [--device <Device ID>] [--keyStorePath <File Path> --keyStorePassword <Password> --keyStoreAlias <Name> --keyStoreAliasPassword <Password>] [--release]
    $ tns deploy ios [--device <Device ID>] [--release]

Builds and deploys the project to a connected physical or virtual device.

<Device ID> is the index or name of the target device as listed by $ tns device

Before building for iOS device, verify that you have configured a valid pair of certificate and provisioning profile on your OS X system.

Options for ios:
    --device - Deploys the project on the specified connected physical or virtual device.
    --release - If set, produces a release build. Otherwise, produces a debug build.
Options for android:
    --device - Deploys the project on the specified connected physical or virtual device.
    --release - If set, produces a release build. Otherwise, produces a debug build.
        When the --keyStore* options are specified, produces a signed release build.
    --keyStorePath - Specifies the file path to the keystore file (P12) which you want to use to code sign your APK.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStorePassword - Provides the password for the keystore file specified with --keyStorePath.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStoreAlias - Provides the alias for the keystore file specified with --keyStorePath.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStoreAliasPassword - Provides the password for the alias specified with --keStoreAliasPassword.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
--[/]--

--[run]--
Usage:
    $ tns run <Command>

You must run the run command with a related command.

<Command> is a related command that sets a target platform for the run command. You can run the following related commands:
    android - Runs your project on a connected Android device or in a native Android emulator, if configured. 
    ios - Runs your project on a connected iOS device or in the iOS Simulator, if configured.

--[/]--

--[run|android]--
Usage:
    $ tns run android [--device <Device ID>] [--keyStorePath <File Path> --keyStorePassword <Password> --keyStoreAlias <Name> --keyStoreAliasPassword <Password>] [--release]
    $ tns run android --emulator [<Emulator Options>] [--keyStorePath <File Path> --keyStorePassword <Password> --keyStoreAlias <Name> --keyStoreAliasPassword <Password>] [--release]

Runs your project on a connected Android device or in a native Android emulator, if configured. This is shorthand for prepare, build and deploy.

<Device ID> is the index or name of the target device as listed by $ tns device
<Emulator Options> is any valid combination of options as listed by $ tns help emulate android

Prerequisites:
Before running your app in the Android emulator from the Android SDK, verify that your system meets the following requirements.
    * Verify that you are running the NativeScript CLI on a Windows, OS X or Linux system.
    * Verify that you have installed the Android SDK.
    * Verify that you have added the following Android SDK directories to the PATH environment variable:
        platform-tools
        tools
Before running your app in the Genymotion emulator, verify that your system meets the following requirements.
    * Verify that you have installed Genymotion.
    * On Windows and Linux systems, verify that you have added the Genymotion installation directory to the PATH environment variable.
    * On OS X systems, verify that you have added the following paths to the PATH environment variable.
        * /Applications/Genymotion.app/Contents/MacOS/
        * /Applications/Genymotion Shell.app/Contents/MacOS/

Options:
    --device - Specifies a connected device on which to run the app.
        You cannot use --device and --emulator simultaneously.
    --emulator - If set, runs the app in a native emulator for the target platform, if configured.
        When set, you can also set any other valid combination of emulator options as listed by $ tns help emulate android
        You cannot use --device and --emulator simultaneously.
    --release - If set, produces a release build. Otherwise, produces a debug build.
        When the --keyStore* options are specified, produces a signed release build.
    --keyStorePath - Specifies the file path to the keystore file (P12) which you want to use to code sign your APK.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStorePassword - Provides the password for the keystore file specified with --keyStorePath.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStoreAlias - Provides the alias for the keystore file specified with --keyStorePath.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStoreAliasPassword - Provides the password for the alias specified with --keStoreAliasPassword.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
--[/]--

--[run|ios]--
Usage:
    $ tns run ios [--device <Device ID>] [--release]
    $ tns run ios --emulator [<Emulator Options>] [--release]

Runs your project on a connected iOS device or in the iOS Simulator, if configured. This is shorthand for prepare, build, and deploy.

<Device ID> is the index or name of the target device as listed by $ tns device
<Emulator Options> is any valid combination of options as listed by $ tns help emulate ios

Prerequisites:
Before building for iOS device, verify that you have configured a valid pair of certificate and provisioning profile on your OS X system.

Before running the iOS Simulator, verify that you have met the following requirements.
    You are running the NativeScript CLI on OS X.
    You have installed Xcode. The version of Xcode must be compatible with the ios-sim-portable npm package on which the 
    NativeScript CLI depends. For more information, visit https://www.npmjs.org/package/ios-sim-portable

Options:
    --device - Specifies a connected device on which to run the app.
        You cannot use --device and --emulator simultaneously.
    --emulator - If set, runs the app in a native emulator for the target platform, if configured.
        When set, you can also set any other valid combination of emulator options as listed by $ tns help emulate ios
        You cannot use --device and --emulator simultaneously.
    --release - If set, produces a release build. Otherwise, produces a debug build.
--[/]--
    
--[debug]--

Usage:
    $ tns debug <Platform> [--device <Device ID>] [--debug-brk | --start | --stop | --get-port] [--debug-port <Port>]

Platform-specific usage:
    $ tns debug android --get-port
    $ tns debug android --debug-brk
    $ tns debug ios --debug-brk

Debugs your project on a connected device or in the native emulator, if configured. This is shorthand for prepare, build, and deploy.
<Device ID> is the index or name of the target device as listed by $ tns list-devices.

Before building for the Android emulator, verify that you have met the following requirements.
    You have added the file paths to the following directories from the Android SDK to your PATH environment variable.
        tools
        platform-tools
    You have created at least one device with the Android Virtual Device manager.

Before building for iOS device, verify that you have configured a valid pair of certificate and provisioning profile on your OS X system.
Connecting to iOS device always uses port 8080, --get-port and --debug-port are not supported.

Options:
    --device - Specifies a connected device on which to run the app.
    --emulator - If set, runs the app in the native emulator for the target platform, if configured.

--[/]--

--[emulate]--

Usage:
    $ tns emulate <Command> [--release]

You must run the emulate command with a related command.

Builds and runs the project in the native emulator for the selected target platform.

<Command> is a related command that sets a target platform for the emulate command. You can run the following related commands:
    android - Builds the specified project in the cloud and runs it in the native Android emulator.
    ios - Builds the specified project in the cloud and runs it in the native iOS Simulator.

Options:
    --release - If set, produces a release build. Otherwise, produces a debug build.

--[/]--

--[emulate|android]--
Usage:
    $ tns emulate android [--path <Directory>] [--timeout <Seconds>] [--keyStorePath <File Path> --keyStorePassword <Password> --keyStoreAlias <Name> --keyStoreAliasPassword <Password>] [--release]
    $ tns emulate android [--avd <Name>] [--path <Directory>] [--timeout <Seconds>] [--keyStorePath <File Path> --keyStorePassword <Password> --keyStoreAlias <Name> --keyStoreAliasPassword <Password>] [--release]
    $ tns emulate android [--geny <GenyName>] [--path <Directory>] [--timeout <Seconds>] [--keyStorePath <File Path> --keyStorePassword <Password> --keyStoreAlias <Name> --keyStoreAliasPassword <Password>] [--release]

Builds the specified project and runs it in a native Android emulator.

<Name> is the name of the Android virtual device that you want to use as listed by $ android list avd
    You can specify only one name at a time.
<GenyName> is the name of the Genymotion virtual device that you want to use as listed by $ genyshell -c "devices list"
    You can specify only one name at a time.

If you do not select an Android virtual device (AVD) with the --avd option or a Genymotion
virtual device with the --geny option, your app runs in the default AVD or a currently running emulator, if any. 
To list the available AVDs, run $ android list avd
To list the available Genymotion devices, run $ genyshell -c "devices list"

To test your app on multiple Android virtual devices, run $ tns emulate android --avd <Name> or $ tns emulate android --geny <GenyName>
for each virtual device.

Prerequisites:
Before running your app in the Android emulator from the Android SDK, verify that your system meets the following requirements.
    * Verify that you are running the NativeScript CLI on a Windows, OS X or Linux system.
    * Verify that you have installed the Android SDK.
    * Verify that you have added the following Android SDK directories to the PATH environment variable:
        platform-tools
        tools
Before running your app in the Genymotion emulator, verify that your system meets the following requirements.
    * Verify that you have installed Genymotion.
    * On Windows and Linux systems, verify that you have added the Genymotion installation directory to the PATH environment variable.
    * On OS X systems, verify that you have added the following paths to the PATH environment variable.
        * /Applications/Genymotion.app/Contents/MacOS/
        * /Applications/Genymotion Shell.app/Contents/MacOS/

Options:
    --path - Specifies the directory that contains the project. If not specified, the project is searched
            for in the current directory and all directories above it.
    --avd - Sets the Android virtual device on which you want to run your app. 
            You can set only one device at a time. 
            To list the available Android virtual devices, run $ android list avd
            You cannot use --avd and --geny simultaneously.
    --geny - Sets the Genymotion virtual device on which you want to run your app. 
            You can set only one device at a time.
            To list the available Genymotion virtual devices, run $ genyshell -c "devices list"
            You cannot use --avd and --geny simultaneously.      
    --timeout - Sets the number of seconds that the NativeScript CLI will wait for the virtual device to boot
            before quitting the operation and releasing the console.
            If not set, the default timeout is 120 seconds. To wait indefinitely, set 0.
    --release - If set, produces a release build. Otherwise, produces a debug build.
        When the --keyStore* options are specified, produces a signed release build.
    --keyStorePath - Specifies the file path to the keystore file (P12) which you want to use to code sign your APK.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStorePassword - Provides the password for the keystore file specified with --keyStorePath.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStoreAlias - Provides the alias for the keystore file specified with --keyStorePath.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
    --keyStoreAliasPassword - Provides the password for the alias specified with --keStoreAliasPassword.
        You can use the --keyStore* options along with --release to produce a signed release build.
        You need to specify all --keyStore* options.
--[/]--

--[emulate|ios]--
Usage:
    $ tns emulate ios [--path <Directory>] [--device <Device Name>] [--availableDevices] [--release] [--timeout]

Builds the specified project in the cloud and runs it in the native iOS Simulator.

<Device Name> is the name of the iOS Simulator device on which you want to run your app as listed by $ tns emulate ios --availableDevices

Prerequisites:
Before running the iOS Simulator, verify that you have met the following requirements.
    You are running the NativeScript CLI on OS X.
    You have installed Xcode. The version of Xcode must be compatible with the ios-sim-portable npm package on which the 
    NativeScript CLI depends. For more information, visit https://www.npmjs.org/package/ios-sim-portable

Options:
    --availableDevices - Lists all available device type identifiers for the current Xcode.
    --release - If set, produces a release build. Otherwise, produces a debug build.
    --path - Specifies the directory that contains the project. If not specified, the project is searched
            for in the current directory and all directories above it.
    --device - Specifies the name of the iOS Simulator device on which you want to run your app. 
            To list the available iOS Simulator devices, run $ tns emulate ios --availableDevices
    --timeout - Sets the number of seconds that the NativeScript CLI will wait for the iOS Simulator to start
            before quitting the operation and releasing the console.
            The value must be a positive integer. 
            If not set, the default timeout is 90 seconds. 
--[/]--

--[device]--

Usage:
    $ tns device [<Platform>] [--timeout  <Milliseconds>]
    $ tns device [<Command>]

Platform-specific usage:
    $ tns device android [--timeout  <Milliseconds>]
    $ tns device ios [--timeout  <Milliseconds>]

Lists all recognized connected devices with serial number and index, grouped by platform. The NativeScript CLI recognizes running Android virtual devices as connected devices.

If a connected Android device is not shown in the list, make sure that you have installed the required Android USB drivers on your system
and that USB debugging is enabled on the device.

Options:
   --timeout - Sets the time in milliseconds for the operation to search for connected devices before completing.
      The operation will continue to wait and listen for newly connected devices and will list them
      after the specified time expires. If not set, the default value is 4000.

<Command> is a related command that extends the device command. You can run the following related commands:
    log - Opens the device log stream for a selected connected device.
    list-applications - Lists the installed applications on all connected Android or iOS devices.
    run - Runs the selected application on a connected Android or iOS device.

--[/]--

--[device|log]--
Usage:
    $ tns device log --device <Device ID>

Opens the device log stream for a selected connected device. 

<Device ID> is the device index or identifier as listed by $ tns device

Options:
   --device - If multiple devices are connected, sets the device for which you want to stream the log in the console.

--[/]--

--[device|list-applications]--

Usage:
    $ tns device list-applications [--device <Device ID>]

Lists the installed applications on all connected Android and iOS devices. 

<Device ID> is the device index or identifier as listed by run $ tns device

Options:
   --device - If multiple devices are connected, sets the device for which you want to list all currently installed applications.

--[/]--

--[device|run]--

Usage:
    $ tns device run <ApplicationId> [--device <Device ID>]

Runs the selected application on a connected Android or iOS device.
You can run this command on one connected device at a time.

<Application ID> is the application identifier as listed by $ tns device list-applications
<Device ID> is the device index or identifier as listed by run $ tns device

Prerequisites:
Before running your app on an iOS device, verify that your system and app meet the following requirements.
    * You are running the NativeScript CLI on an OS X system.
    * You have installed Xcode 6 or later.
    * You have built your app with the debug build configuration.
Before running your app on an Android device, verify that your app meets the following requirement.
    * You have built your app with the debug build configuration.

Options:
   --device - If multiple devices are connected, sets the device on which you want to run the app.
        You can run this command on one connected device at a time.

--[/]--

--[feature-usage-tracking]--

Usage:
    $ tns feature-usage-tracking [<Command>]

Configures anonymous usage statistics tracking for the NativeScript command-line interface.
All data gathered is used strictly for improving the product and will never be used to identify or contact you.

<Command> is a related command that extends the feature-usage-tracking command. You can run the following related commands:
    status - Shows the current configuration for anonymous usage tracking for the
             NativeScript command-line interface.
    enable - Enables anonymous usage statistics tracking. All data gathered is used strictly
             for improving the product and will never be used to identify or contact you.
    disable - Disables anonymous usage statistics tracking.

--[/]--