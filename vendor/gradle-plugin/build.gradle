import groovy.json.JsonSlurper
import org.gradle.internal.logging.text.StyledTextOutputFactory
import static org.gradle.internal.logging.text.StyledTextOutput.Style

apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'


buildscript {
    def computeKotlinVersion = { -> project.hasProperty("kotlinVersion") ? kotlinVersion : "1.4.21" }
    def kotlinVersion = computeKotlinVersion()
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:{{runtimeAndroidPluginVersion}}'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlinVersion"

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }

    // Set up styled logger
    project.ext.outLogger = services.get(StyledTextOutputFactory).create("colouredOutputLogger")

    // todo: pass appResourcesPath from CLI as a gradle arg
    project.ext.getAppResourcesPath = { ->
        def relativePathToApp = "app"
        def relativePathToAppResources
        def absolutePathToAppResources
        def projectRoot = "$rootDir/../../.."
        def nsConfigFile = file("$projectRoot/nsconfig.json")
        def nsConfig

        if (nsConfigFile.exists()) {
            nsConfig = new JsonSlurper().parseText(nsConfigFile.getText("UTF-8"))
        }

        if(nsConfig != null && nsConfig.appPath != null){
            relativePathToApp = nsConfig.appPath
        }

        if(nsConfig != null && nsConfig.appResourcesPath != null ) {
            relativePathToAppResources = nsConfig.appResourcesPath
        } else {
            relativePathToAppResources  = "$relativePathToApp/App_Resources"
        }

        absolutePathToAppResources = java.nio.file.Paths.get(projectRoot).resolve(relativePathToAppResources).toAbsolutePath()

        project.ext.appResourcesPath = absolutePathToAppResources

        return absolutePathToAppResources
    }

    def applyBuildScriptConfigurations = { ->
        def absolutePathToAppResources = getAppResourcesPath()
        def pathToBuildScriptGradle = "$absolutePathToAppResources/Android/buildscript.gradle"
        def buildScriptGradle = file(pathToBuildScriptGradle)
        if (buildScriptGradle.exists()) {
            outLogger.withStyle(Style.SuccessHeader).println "\t ~ applying user-defined buildscript from ${buildScriptGradle}"
            apply from: pathToBuildScriptGradle, to: buildscript
        }

        def pathToPluginBuildScriptGradle = "$rootDir/buildscript.gradle"
        def pluginBuildScriptGradle = file(pathToPluginBuildScriptGradle)
        if (pluginBuildScriptGradle.exists()) {
            outLogger.withStyle(Style.SuccessHeader).println "\t ~ applying user-defined buildscript from dependency ${pluginBuildScriptGradle}"
            apply from: pathToPluginBuildScriptGradle, to: buildscript
        }
    }
    applyBuildScriptConfigurations()

}

allprojects {
    repositories {
        mavenLocal()
        mavenCentral()
        maven {
            url 'https://maven.google.com/'
            name 'Google'
        }
        jcenter()
    }
}


def computeCompileSdkVersion = { -> project.hasProperty("compileSdk") ? compileSdk : 28 }
def computeBuildToolsVersion = { ->
    project.hasProperty("buildToolsVersion") ? buildToolsVersion : "28.0.3"
}

android {
    applyBeforePluginGradleConfiguration()

    compileSdkVersion computeCompileSdkVersion()
    buildToolsVersion computeBuildToolsVersion()

    defaultConfig {
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
    }
}

dependencies {
    def supportVer = "28.0.0"
    if (project.hasProperty("supportVersion")) {
        supportVer = supportVersion
    }
    compileOnly "com.android.support:support-v4:$supportVer"
    compileOnly "com.android.support:appcompat-v7:$supportVer"

    configurations.all {
       resolutionStrategy.eachDependency { DependencyResolveDetails details ->
           if (details.requested.group == "com.android.support" && !details.requested.name.startsWith("multidex")) {
               details.useVersion supportVer
           }
       }
    }
    implementation files('../../../node_modules/@nativescript/core/platforms/android/widgets-release.aar')
}

def applyBeforePluginGradleConfiguration() {
    def appResourcesPath = getAppResourcesPath()
    def pathToBeforePluginGradle = "$appResourcesPath/Android/before-plugins.gradle"
    def beforePluginGradle = file(pathToBeforePluginGradle)
    if (beforePluginGradle.exists()) {
        outLogger.withStyle(Style.SuccessHeader).println "\t ~ applying user-defined configuration from ${beforePluginGradle}"
        apply from: pathToBeforePluginGradle
    }
}
